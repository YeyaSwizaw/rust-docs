var searchIndex = {};
searchIndex['worldgen'] = {"items":[[0,"","worldgen","World and Noise Generation in Rust.",null,null],[0,"noise","","The Noise module provides generators for different kinds of noise.",null,null],[0,"perlin","worldgen::noise","A provider of perlin noise.",null,null],[3,"Octaves","worldgen::noise::perlin","Octaves are the number of layers of coherent noise used\nin the generation of perlin noise.",null,null],[12,"value","","",0,null],[3,"Frequency","","Frequency controls the 'width' of the noise. If you imagine noise\nas hills and valleys, then frequency controls the distance between\nthem.",null,null],[12,"value","","",1,null],[3,"Persistence","","Persistence controls how much each octave contributes to the\nfinal noise value.",null,null],[12,"value","","",2,null],[3,"Lacunarity","","Lacunarity controls the frequency of each octave in the final noise\nvalue.",null,null],[12,"value","","",3,null],[3,"PerlinNoise","","The perlin noise source",null,null],[11,"fmt","","",0,{"inputs":[{"name":"octaves"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"octaves"}],"output":{"name":"octaves"}}],[11,"of","","",0,{"inputs":[{"name":"octaves"},{"name":"u32"}],"output":{"name":"octaves"}}],[11,"default","","",0,{"inputs":[{"name":"octaves"}],"output":{"name":"octaves"}}],[11,"set_to","","",0,{"inputs":[{"name":"octaves"},{"name":"perlinnoise"}],"output":{"name":"perlinnoise"}}],[11,"fmt","","",1,{"inputs":[{"name":"frequency"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"frequency"}],"output":{"name":"frequency"}}],[11,"of","","",1,{"inputs":[{"name":"frequency"},{"name":"f64"}],"output":{"name":"frequency"}}],[11,"default","","",1,{"inputs":[{"name":"frequency"}],"output":{"name":"frequency"}}],[11,"set_to","","",1,{"inputs":[{"name":"frequency"},{"name":"perlinnoise"}],"output":{"name":"perlinnoise"}}],[11,"fmt","","",2,{"inputs":[{"name":"persistence"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"persistence"}],"output":{"name":"persistence"}}],[11,"of","","",2,{"inputs":[{"name":"persistence"},{"name":"f64"}],"output":{"name":"persistence"}}],[11,"default","","",2,{"inputs":[{"name":"persistence"}],"output":{"name":"persistence"}}],[11,"set_to","","",2,{"inputs":[{"name":"persistence"},{"name":"perlinnoise"}],"output":{"name":"perlinnoise"}}],[11,"fmt","","",3,{"inputs":[{"name":"lacunarity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"lacunarity"}],"output":{"name":"lacunarity"}}],[11,"of","","",3,{"inputs":[{"name":"lacunarity"},{"name":"f64"}],"output":{"name":"lacunarity"}}],[11,"default","","",3,{"inputs":[{"name":"lacunarity"}],"output":{"name":"lacunarity"}}],[11,"set_to","","",3,{"inputs":[{"name":"lacunarity"},{"name":"perlinnoise"}],"output":{"name":"perlinnoise"}}],[11,"clone","","",4,{"inputs":[{"name":"perlinnoise"}],"output":{"name":"perlinnoise"}}],[11,"fmt","","",4,{"inputs":[{"name":"perlinnoise"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[{"name":"perlinnoise"}],"output":{"name":"perlinnoise"}}],[11,"new","","Construct the default perlin source.",4,{"inputs":[{"name":"perlinnoise"}],"output":{"name":"perlinnoise"}}],[11,"set","","Set a property on the noise source.",4,{"inputs":[{"name":"perlinnoise"},{"name":"t"}],"output":{"name":"perlinnoise"}}],[11,"generate","","",4,{"inputs":[{"name":"perlinnoise"},{"name":"f64"},{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[0,"coherent","worldgen::noise","A provider of coherent noise.\nThis generates a noise value for each corner of the unit square the given\npoint is in, and then calculates the noise value based on these.",null,null],[3,"CoherentNoise","worldgen::noise::coherent","",null,null],[11,"clone","","",5,{"inputs":[{"name":"coherentnoise"}],"output":{"name":"coherentnoise"}}],[11,"default","","",5,{"inputs":[{"name":"coherentnoise"}],"output":{"name":"coherentnoise"}}],[11,"generate","","",5,{"inputs":[{"name":"coherentnoise"},{"name":"f64"},{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[8,"NoiseProvider","worldgen::noise","The trait for a noise generator.",null,null],[10,"generate","","This method generates a value of noise at the given location, using a given seed.",6,{"inputs":[{"name":"noiseprovider"},{"name":"f64"},{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[0,"noisemap","worldgen","Generators for finite noise maps",null,null],[3,"Seed","worldgen::noisemap","Sets the seed that is used for generating the noise.",null,null],[12,"value","","",7,null],[3,"Step","","Sets the increment in x and y for each coordinate in the\nnoise map.",null,null],[12,"x","","",8,null],[12,"y","","",8,null],[3,"Size","","Sets the size of the generated chunks.",null,null],[12,"w","","",9,null],[12,"h","","",9,null],[3,"NoiseMap","","The standard noise map.",null,null],[3,"ScaledNoiseMap","","A scaled noise map.",null,null],[3,"NoiseMapCombination","","A combination of noise maps.",null,null],[11,"eq","","",7,{"inputs":[{"name":"seed"},{"name":"seed"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"seed"},{"name":"seed"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"seed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"seed"}],"output":{"name":"seed"}}],[11,"default","","",7,{"inputs":[{"name":"seed"}],"output":{"name":"seed"}}],[11,"of_value","","Sets the seed to an exact integer value.",7,{"inputs":[{"name":"seed"},{"name":"i32"}],"output":{"name":"seed"}}],[11,"of","","Sets the seed to the hash of whatever is provided.",7,{"inputs":[{"name":"seed"},{"name":"t"}],"output":{"name":"seed"}}],[11,"set_to","","",7,{"inputs":[{"name":"seed"},{"name":"noisemap"}],"output":{"name":"noisemap"}}],[11,"eq","","",8,{"inputs":[{"name":"step"},{"name":"step"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"step"},{"name":"step"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"step"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"step"}],"output":{"name":"step"}}],[11,"default","","",8,{"inputs":[{"name":"step"}],"output":{"name":"step"}}],[11,"of","","",8,{"inputs":[{"name":"step"},{"name":"f64"},{"name":"f64"}],"output":{"name":"step"}}],[11,"set_to","","",8,{"inputs":[{"name":"step"},{"name":"noisemap"}],"output":{"name":"noisemap"}}],[11,"eq","","",9,{"inputs":[{"name":"size"},{"name":"size"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"size"},{"name":"size"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"size"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"size"}],"output":{"name":"size"}}],[11,"default","","",9,{"inputs":[{"name":"size"}],"output":{"name":"size"}}],[11,"of","","",9,{"inputs":[{"name":"size"},{"name":"i32"},{"name":"i32"}],"output":{"name":"size"}}],[11,"set_to","","",9,{"inputs":[{"name":"size"},{"name":"noisemap"}],"output":{"name":"noisemap"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"size"},{"name":"size"}],"output":{"name":"option"}}],[11,"cmp","","",9,{"inputs":[{"name":"size"},{"name":"size"}],"output":{"name":"ordering"}}],[8,"NoiseMapGenerator","","Base trait for noise maps.",null,null],[11,"generate","","Generates the central chunk of the noise map.",10,{"inputs":[{"name":"noisemapgenerator"}],"output":{"name":"vec"}}],[10,"generate_chunk","","Generates a specific chunk of the noise map.",10,{"inputs":[{"name":"noisemapgenerator"},{"name":"i32"},{"name":"i32"}],"output":{"name":"vec"}}],[10,"set","","Set a property on the noise map.",10,{"inputs":[{"name":"noisemapgenerator"},{"name":"p"}],"output":{"name":"self"}}],[10,"get_size","","Returns the size of the noise map.",10,{"inputs":[{"name":"noisemapgenerator"}],"output":{"name":"size"}}],[11,"clone","","",11,{"inputs":[{"name":"noisemap"}],"output":{"name":"noisemap"}}],[11,"fmt","","",11,{"inputs":[{"name":"noisemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",11,{"inputs":[{"name":"noisemap"}],"output":{"name":"noisemap"}}],[11,"clone","","",12,{"inputs":[{"name":"scalednoisemap"}],"output":{"name":"scalednoisemap"}}],[11,"fmt","","",12,{"inputs":[{"name":"scalednoisemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"noisemapcombination"}],"output":{"name":"noisemapcombination"}}],[11,"fmt","","",13,{"inputs":[{"name":"noisemapcombination"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new noise map with the default properties.",11,{"inputs":[{"name":"noisemap"},{"name":"t"}],"output":{"name":"noisemap"}}],[11,"set","","",11,{"inputs":[{"name":"noisemap"},{"name":"p"}],"output":{"name":"noisemap"}}],[11,"generate_chunk","","",11,{"inputs":[{"name":"noisemap"},{"name":"i32"},{"name":"i32"}],"output":{"name":"vec"}}],[11,"get_size","","",11,{"inputs":[{"name":"noisemap"}],"output":{"name":"size"}}],[11,"set","","",12,{"inputs":[{"name":"scalednoisemap"},{"name":"p"}],"output":{"name":"scalednoisemap"}}],[11,"generate_chunk","","",12,{"inputs":[{"name":"scalednoisemap"},{"name":"i32"},{"name":"i32"}],"output":{"name":"vec"}}],[11,"get_size","","",12,{"inputs":[{"name":"scalednoisemap"}],"output":{"name":"size"}}],[11,"set","","",13,{"inputs":[{"name":"noisemapcombination"},{"name":"p"}],"output":{"name":"noisemapcombination"}}],[11,"generate_chunk","","",13,{"inputs":[{"name":"noisemapcombination"},{"name":"i32"},{"name":"i32"}],"output":{"name":"vec"}}],[11,"get_size","","",13,{"inputs":[{"name":"noisemapcombination"}],"output":{"name":"size"}}],[11,"mul","","",11,{"inputs":[{"name":"noisemap"},{"name":"i32"}],"output":{"name":"scalednoisemap"}}],[11,"mul","","",12,{"inputs":[{"name":"scalednoisemap"},{"name":"i32"}],"output":{"name":"scalednoisemap"}}],[11,"add","","",11,{"inputs":[{"name":"noisemap"},{"name":"noisemap"}],"output":{"name":"output"}}],[11,"add","","",11,{"inputs":[{"name":"noisemap"},{"name":"scalednoisemap"}],"output":{"name":"output"}}],[11,"add","","",11,{"inputs":[{"name":"noisemap"},{"name":"noisemapcombination"}],"output":{"name":"output"}}],[11,"add","","",12,{"inputs":[{"name":"scalednoisemap"},{"name":"noisemap"}],"output":{"name":"output"}}],[11,"add","","",12,{"inputs":[{"name":"scalednoisemap"},{"name":"scalednoisemap"}],"output":{"name":"output"}}],[11,"add","","",12,{"inputs":[{"name":"scalednoisemap"},{"name":"noisemapcombination"}],"output":{"name":"output"}}],[11,"add","","",13,{"inputs":[{"name":"noisemapcombination"},{"name":"noisemap"}],"output":{"name":"output"}}],[11,"add","","",13,{"inputs":[{"name":"noisemapcombination"},{"name":"scalednoisemap"}],"output":{"name":"output"}}],[11,"add","","",13,{"inputs":[{"name":"noisemapcombination"},{"name":"noisemapcombination"}],"output":{"name":"output"}}],[0,"world","worldgen","For generating maps of specfic objects based on thresholds.",null,null],[3,"World","worldgen::world","The World class.",null,null],[0,"tile","","",null,null],[3,"Tile","worldgen::world::tile","Objects to generate in the world based on given constraints",null,null],[4,"Constraint","","A constraint that limits when a tile should be chosen for\nthe generated world.",null,null],[13,"LT","","This constraint is satisfied when the noise value is\nlower than the given threshold.",14,null],[13,"GT","","This constraint is satisfied when the noise value is\ngreater than the given threshold.",14,null],[11,"clone","","",14,{"inputs":[{"name":"constraint"}],"output":{"name":"constraint"}}],[11,"satisfied_by","","Returns true is the given value would satisfy this constraint.",14,{"inputs":[{"name":"constraint"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"tile"}],"output":{"name":"tile"}}],[11,"new","","Construct a new tile represented by the given object.",15,{"inputs":[{"name":"tile"},{"name":"t"}],"output":{"name":"tile"}}],[11,"when","","Adds a constraint to the tile.",15,{"inputs":[{"name":"tile"},{"name":"constraint"}],"output":{"name":"tile"}}],[11,"value","","Returns the value this tile is represented by.",15,{"inputs":[{"name":"tile"}],"output":{"name":"t"}}],[11,"satisfied_by","","Returns true if the given value would satisfy all of this tile's\nconstraints.",15,{"inputs":[{"name":"tile"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"clone","worldgen::world","",16,{"inputs":[{"name":"world"}],"output":{"name":"world"}}],[11,"new","","Constructs a new world using a given noisemap",16,{"inputs":[{"name":"world"},{"name":"nm"}],"output":{"name":"world"}}],[11,"add","","Add a tile definition to the world",16,{"inputs":[{"name":"world"},{"name":"tile"}],"output":{"name":"world"}}],[11,"generate","","Generates the central chunk of the world.",16,{"inputs":[{"name":"world"}],"output":{"name":"vec"}}],[11,"generate_chunk","","Generates a specific chunk of the world.",16,{"inputs":[{"name":"world"},{"name":"i32"},{"name":"i32"}],"output":{"name":"vec"}}]],"paths":[[3,"Octaves"],[3,"Frequency"],[3,"Persistence"],[3,"Lacunarity"],[3,"PerlinNoise"],[3,"CoherentNoise"],[8,"NoiseProvider"],[3,"Seed"],[3,"Step"],[3,"Size"],[8,"NoiseMapGenerator"],[3,"NoiseMap"],[3,"ScaledNoiseMap"],[3,"NoiseMapCombination"],[4,"Constraint"],[3,"Tile"],[3,"World"]]};
initSearch(searchIndex);
